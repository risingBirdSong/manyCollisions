{"version":3,"sources":["many.ts"],"names":[],"mappings":"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","file":"many.99875bbc.js","sourceRoot":"..","sourcesContent":["let clrsA = [\"#CD88AF\", \"#AA5585\", \"#882D61\", \"#661141\", \"#440027\"];\r\nlet clrsB = [\"#F8A6AC\", \"#CF676F\", \"#A6373F\", \"#7C151C\", \"#530006\",];\r\nlet clrsC = [\"#FFD1AA\", \"#D49A6A\", \"#AA6C39\", \"#804515\", \"#552600\",];\r\nlet clrsD = [\"#7BB992\", \"#4D9A6A\", \"#297B48\", \"#0F5D2C\", \"#003E17\",];\r\nlet clrsE = [\"#7F81B1\", \"#545894\", \"#333676\", \"#191C59\", \"#080B3B\",];\r\nlet clrs = clrsB;\r\n\r\n\r\nlet canvas: HTMLCanvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement;\r\nconst context: CanvasRenderingContext2D = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\n\r\nlet gravity = 1;\r\nlet friction = .80;\r\n\r\nexport let mouse = {\r\n    x: 0,\r\n    y: 0\r\n}\r\n\r\nwindow.addEventListener(\"mousemove\", (event) => {\r\n    mouse.x = event.x;\r\n    mouse.y = event.y;\r\n})\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    init();\r\n\r\n})\r\n\r\nwindow.addEventListener(\"mousemove\", () => {\r\n\r\n})\r\n\r\n// canvas.onmousedown = function(e) {\r\n//     circle2.x = mouse.x;\r\n//     circle2.y = mouse.y;\r\n// };\r\n\r\nfunction getRandomInRange(min, max) : number {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\n\r\nfunction getDistancePythag(x1: number, y1: number, x2: number, y2: number) {\r\n    let xDistance = x2 - x1;\r\n    let yDistance = y2 - y1;\r\n    return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2))\r\n}\r\n\r\nfunction getRandomColor(colorArray: string[]) {\r\n    return colorArray[Math.floor(Math.random() * colorArray.length)]\r\n}\r\n\r\ninterface velocityI {\r\n    dx : number,\r\n    dy : number\r\n}\r\n\r\n\r\nfunction rotate(velocity : velocityI, angle : number) {\r\n    const rotatedVelocities = {\r\n        x: velocity.dx * Math.cos(angle) - velocity.dy * Math.sin(angle),\r\n        y: velocity.dx * Math.sin(angle) + velocity.dy * Math.cos(angle)\r\n    };\r\n\r\n    return rotatedVelocities;\r\n}\r\n\r\n/**\r\n * Swaps out two colliding particles' x and y velocities after running through\r\n * an elastic collision reaction equation\r\n *\r\n */\r\n\r\nfunction resolveCollision(particle : Circle, otherParticle : Circle) {\r\n    const xVelocityDiff = particle.velocity.dx - otherParticle.velocity.dx;\r\n    const yVelocityDiff = particle.velocity.dy - otherParticle.velocity.dy;\r\n\r\n    const xDist = otherParticle.x - particle.x;\r\n    const yDist = otherParticle.y - particle.y;\r\n\r\n    // Prevent accidental overlap of particles\r\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\r\n\r\n        // Grab angle between the two colliding particles\r\n        const angle = -Math.atan2(otherParticle.y - particle.y, otherParticle.x - particle.x);\r\n\r\n        // Store mass in var for better readability in collision equation\r\n        const m1 = particle.mass;\r\n        const m2 = otherParticle.mass;\r\n\r\n        // Velocity before equation\r\n        const u1 = rotate(particle.velocity, angle);\r\n        const u2 = rotate(otherParticle.velocity, angle);\r\n\r\n        // Velocity after 1d collision equation\r\n        const v1 = { dx: u1.x * (m1 - m2) / (m1 + m2) + u2.x * 2 * m2 / (m1 + m2), dy: u1.y };\r\n        const v2 = { dx: u2.x * (m1 - m2) / (m1 + m2) + u1.x * 2 * m2 / (m1 + m2), dy: u2.y };\r\n\r\n        // Final velocity after rotating axis back to original location\r\n        const vFinal1 = rotate(v1, -angle);\r\n        const vFinal2 = rotate(v2, -angle);\r\n\r\n        // Swap particle velocities for realistic bounce effect\r\n        particle.velocity.dx = vFinal1.x;\r\n        particle.velocity.dy = vFinal1.y;\r\n\r\n        otherParticle.velocity.dx = vFinal2.x;\r\n        otherParticle.velocity.dy = vFinal2.y;\r\n    }\r\n}\r\n\r\nclass Circle {\r\n\r\n\r\n    public velocity = {\r\n        dx: getRandomInRange(-2.5, 2.5),\r\n        dy: getRandomInRange(-2.5, 2.5),\r\n    };\r\n\r\n    public canvas: HTMLCanvasElement\r\n    public context: CanvasRenderingContext2D\r\n\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public clamp : number = 2;\r\n\r\n    public radius: number;\r\n    public originalRadius: number = this.radius;\r\n    public begin: number = 0;\r\n    public end: number = Math.PI * 2;\r\n\r\n    public mouseRangeInteract: number = 100;\r\n    public growthRate: number = 4;\r\n\r\n    public maxGrowth: number = (Math.random() * 100) + 10;\r\n\r\n    public mass : number = this.radius;\r\n\r\n\r\n    constructor(x: number, y: number, radius: number = 50, dx: number = 0, dy: number = 0,\r\n        public color: string) {\r\n\r\n        this.canvas = canvas;\r\n        this.context = context;\r\n\r\n        this.radius = radius\r\n        this.originalRadius = this.radius;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        this.velocity.dx = dx;\r\n        this.velocity.dy = dy;\r\n\r\n        this.mass = this.radius;\r\n    }\r\n\r\n    public draw = () => {\r\n        this.context.beginPath();\r\n        this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n        this.context.fillStyle = this.color;\r\n        this.context.fill();\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n    }\r\n\r\n\r\n    public update = (particles : Circle[]) => {\r\n\r\n     for (let i = 0; i < particles.length; i ++) {\r\n        if (this === particles[i]){continue};\r\n\r\n        let hypotonuse = getDistancePythag(this.x, this.y, particles[i].x, particles[i].y);\r\n                let bothCombinedRadius = this.radius + particles[i].radius;\r\n                let spaceBetween = hypotonuse - bothCombinedRadius;\r\n                if (spaceBetween <= 0) {\r\n                    resolveCollision(this, particles[i])\r\n                }\r\n     }\r\n\r\n     if (this.x + this.radius > window.innerWidth || this.x - this.radius < 0) {\r\n        this.velocity.dx = - this.velocity.dx;\r\n     }\r\n\r\n     if (this.y + this.radius > window.innerHeight || this.y - this.radius < 0) {\r\n        this.velocity.dy = - this.velocity.dy;\r\n     }\r\n\r\n     if (this.velocity.dx || this.velocity.dy < this.clamp){\r\n         this.x += this.velocity.dx;\r\n         this.y += this.velocity.dy;\r\n     }\r\n\r\n     else{\r\n        this.x += this.velocity.dx * .1;\r\n        this.y += this.velocity.dy * .1;\r\n     }\r\n\r\n        this.draw();\r\n    }\r\n}\r\n\r\n\r\nlet allCircles: Circle[] = [];\r\n\r\n\r\n\r\n\r\nfunction init() {\r\n    let cushion = 10;\r\n    for (let i = 0; i < 80; i++) {\r\n        let radius = getRandomInRange(10,40);\r\n        let circle = new Circle(\r\n            getRandomInRange(radius, window.innerWidth - radius),\r\n            getRandomInRange(radius, window.innerHeight - radius),\r\n            radius, getRandomInRange(2,4), getRandomInRange(2,4), getRandomColor(clrsC));\r\n        if (i != 0) {\r\n            for (let j = 0; j < allCircles.length; j++) {\r\n\r\n                let hypotonuse = getDistancePythag(circle.x, circle.y, allCircles[j].x, allCircles[j].y);\r\n                let bothCombinedRadius = circle.radius + allCircles[j].radius;\r\n                let spaceBetween = hypotonuse - bothCombinedRadius - cushion;\r\n                if (spaceBetween <= 0) {\r\n                    let stop = true;\r\n                    circle = new Circle(getRandomInRange(radius, window.innerWidth - radius),\r\n                    getRandomInRange(radius, window.innerHeight - radius),\r\n                        radius, getRandomInRange(2,4), getRandomInRange(2,4), getRandomColor(clrsC));\r\n                    j = 0;\r\n                }\r\n                // if (getDistancePythag(circle.x, circle.y, allCircles[j].x, allCircles[j].y)\r\n                //  - (allCircles[j].radius + circle.radius) <= 0) {\r\n                //     console.log(\"they overlapped!\");\r\n                //     circle = new Circle(Math.random() * window.innerWidth,\r\n                //         Math.random() * window.innerHeight,\r\n                //         Math.random() * 200, null, null, getRandomColor(clrsC));\r\n\r\n                //     j = 0;\r\n                // }\r\n            }\r\n        }\r\n        allCircles.push(circle);\r\n\r\n    }\r\n}\r\nfunction animate() {\r\n    requestAnimationFrame(animate);\r\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\r\n    for (let c of allCircles) {\r\n        c.update(allCircles);\r\n    }\r\n}\r\n\r\ninit();\r\nanimate(); "]}